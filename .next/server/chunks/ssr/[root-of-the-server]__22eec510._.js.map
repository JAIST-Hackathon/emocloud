{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/src/utils/api.ts"],"sourcesContent":["import type { EmotionData } from \"@/types/emotion\"\n\n/**\n * 感情データを送信する関数\n */\nexport async function postEmotionData(\n    color: string,\n    latitude: number,\n    longitude: number,\n    timestamp: string,\n): Promise<{ success: boolean; message: string }> {\n    try {\n        console.log(\"--- 感情データ送信中 ---\")\n        console.log(\"色:\", color)\n        console.log(\"緯度:\", latitude)\n        console.log(\"経度:\", longitude)\n        console.log(\"タイムスタンプ:\", timestamp)\n        console.log(\"---------------------------\")\n\n        // 実際のAPI呼び出しの代わりにダミー処理\n        await new Promise((resolve) => setTimeout(resolve, 500))\n\n        return {\n            success: true,\n            message: \"感情データが送信されました！\",\n        }\n    } catch (error) {\n        console.error(\"データ送信エラー:\", error)\n        return {\n            success: false,\n            message: \"データ送信中にエラーが発生しました。\",\n        }\n    }\n}\n\n/**\n * 感情マップデータを取得する関数\n */\nexport async function fetchEmotionMapData(): Promise<EmotionData[]> {\n    console.log(\"感情マップデータをフェッチ中...\")\n\n    // ダミーデータを返す\n    const dummyData: EmotionData[] = [\n        {\n            color: \"#FF0000\",\n            latitude: 35.681236 + (Math.random() - 0.5) * 0.01,\n            longitude: 139.767125 + (Math.random() - 0.5) * 0.01,\n            timestamp: new Date().toISOString(),\n        },\n        {\n            color: \"#00FF00\",\n            latitude: 35.681236 + (Math.random() - 0.5) * 0.01,\n            longitude: 139.767125 + (Math.random() - 0.5) * 0.01,\n            timestamp: new Date().toISOString(),\n        },\n        {\n            color: \"#0000FF\",\n            latitude: 35.681236 + (Math.random() - 0.5) * 0.01,\n            longitude: 139.767125 + (Math.random() - 0.5) * 0.01,\n            timestamp: new Date().toISOString(),\n        },\n        {\n            color: \"#FFFF00\",\n            latitude: 35.681236 + (Math.random() - 0.5) * 0.01,\n            longitude: 139.767125 + (Math.random() - 0.5) * 0.01,\n            timestamp: new Date().toISOString(),\n        },\n        {\n            color: \"#FF00FF\",\n            latitude: 35.681236 + (Math.random() - 0.5) * 0.01,\n            longitude: 139.767125 + (Math.random() - 0.5) * 0.01,\n            timestamp: new Date().toISOString(),\n        },\n        {\n            color: \"#00FFFF\",\n            latitude: 35.681236 + (Math.random() - 0.5) * 0.01,\n            longitude: 139.767125 + (Math.random() - 0.5) * 0.01,\n            timestamp: new Date().toISOString(),\n        },\n    ]\n\n    return new Promise((resolve) => setTimeout(() => resolve(dummyData), 1000))\n}\n"],"names":[],"mappings":";;;;AAKO,eAAe,gBAClB,KAAa,EACb,QAAgB,EAChB,SAAiB,EACjB,SAAiB;IAEjB,IAAI;QACA,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,MAAM;QAClB,QAAQ,GAAG,CAAC,OAAO;QACnB,QAAQ,GAAG,CAAC,OAAO;QACnB,QAAQ,GAAG,CAAC,YAAY;QACxB,QAAQ,GAAG,CAAC;QAEZ,uBAAuB;QACvB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;QAEnD,OAAO;YACH,SAAS;YACT,SAAS;QACb;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO;YACH,SAAS;YACT,SAAS;QACb;IACJ;AACJ;AAKO,eAAe;IAClB,QAAQ,GAAG,CAAC;IAEZ,YAAY;IACZ,MAAM,YAA2B;QAC7B;YACI,OAAO;YACP,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAC9C,WAAW,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAChD,WAAW,IAAI,OAAO,WAAW;QACrC;QACA;YACI,OAAO;YACP,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAC9C,WAAW,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAChD,WAAW,IAAI,OAAO,WAAW;QACrC;QACA;YACI,OAAO;YACP,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAC9C,WAAW,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAChD,WAAW,IAAI,OAAO,WAAW;QACrC;QACA;YACI,OAAO;YACP,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAC9C,WAAW,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAChD,WAAW,IAAI,OAAO,WAAW;QACrC;QACA;YACI,OAAO;YACP,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAC9C,WAAW,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAChD,WAAW,IAAI,OAAO,WAAW;QACrC;QACA;YACI,OAAO;YACP,UAAU,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAC9C,WAAW,aAAa,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;YAChD,WAAW,IAAI,OAAO,WAAW;QACrC;KACH;IAED,OAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,IAAM,QAAQ,YAAY;AACzE","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/src/components/google-map.tsx"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport type { Location } from \"@/types/emotion\"\nimport { fetchEmotionMapData } from \"@/utils/api\"\n\ninterface GoogleMapProps {\n    onLocationChange: (location: Location | null) => void\n}\n\ndeclare global {\n    interface Window {\n        google: any\n        initMap: () => void\n    }\n}\n\nexport function GoogleMap({ onLocationChange }: GoogleMapProps) {\n    const mapRef = useRef<HTMLDivElement>(null)\n    const mapInstanceRef = useRef<any>(null)\n    const markersRef = useRef<any[]>([])\n    const [currentLocation, setCurrentLocation] = useState<Location | null>(null)\n    const [mapLocked, setMapLocked] = useState(true)\n    const [range, setRange] = useState(\"100\")\n\n    const zoomLevels = {\n        \"20\": 20,\n        \"50\": 19,\n        \"100\": 18,\n    }\n\n    useEffect(() => {\n        const initializeMap = () => {\n            if (!mapRef.current || !window.google) return\n\n            const styledMapType = new window.google.maps.StyledMapType(\n                [\n                    { elementType: \"geometry\", stylers: [{ color: \"#f5f5f5\" }] },\n                    { elementType: \"labels\", stylers: [{ visibility: \"off\" }] },\n                    { featureType: \"administrative\", stylers: [{ visibility: \"off\" }] },\n                    { featureType: \"poi\", stylers: [{ visibility: \"off\" }] },\n                    {\n                        featureType: \"road\",\n                        elementType: \"geometry\",\n                        stylers: [{ color: \"#cccccc\" }],\n                    },\n                    { featureType: \"transit\", stylers: [{ visibility: \"off\" }] },\n                    {\n                        featureType: \"water\",\n                        elementType: \"geometry\",\n                        stylers: [{ color: \"#e0e0e0\" }],\n                    },\n                ],\n                { name: \"Gray No Labels\" },\n            )\n\n            mapInstanceRef.current = new window.google.maps.Map(mapRef.current, {\n                center: { lat: 35.681236, lng: 139.767125 },\n                zoom: 18,\n                disableDefaultUI: true,\n                draggable: false,\n                gestureHandling: \"none\",\n                keyboardShortcuts: false,\n            })\n\n            mapInstanceRef.current.mapTypes.set(\"styled_map\", styledMapType)\n            mapInstanceRef.current.setMapTypeId(\"styled_map\")\n\n            // 現在地取得\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        const location = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        }\n\n                        setCurrentLocation(location)\n                        onLocationChange(location)\n\n                        mapInstanceRef.current.setCenter(location)\n                        mapInstanceRef.current.setZoom(zoomLevels[range as keyof typeof zoomLevels])\n\n                        new window.google.maps.Marker({\n                            position: location,\n                            map: mapInstanceRef.current,\n                            title: \"あなたの現在地\",\n                            icon: {\n                                path: window.google.maps.SymbolPath.CIRCLE,\n                                scale: 7,\n                                fillColor: \"#007AFF\",\n                                fillOpacity: 1,\n                                strokeWeight: 2,\n                                strokeColor: \"#ffffff\",\n                            },\n                        })\n                    },\n                    () => alert(\"現在地を取得できませんでした。\"),\n                )\n            }\n        }\n\n        if (window.google) {\n            initializeMap()\n        } else {\n            window.initMap = initializeMap\n            const script = document.createElement(\"script\")\n            script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&callback=initMap`\n            script.async = true\n            script.defer = true\n            document.head.appendChild(script)\n        }\n\n        // 定期的にデータを更新\n        const interval = setInterval(fetchAndDisplayEmotionMapData, 10000)\n        return () => clearInterval(interval)\n    }, [range, onLocationChange])\n\n    const toggleMapControl = () => {\n        if (!mapInstanceRef.current) return\n\n        const newMapLocked = !mapLocked\n        setMapLocked(newMapLocked)\n\n        mapInstanceRef.current.setOptions({\n            draggable: !newMapLocked,\n            gestureHandling: newMapLocked ? \"none\" : \"greedy\",\n            zoomControl: !newMapLocked,\n        })\n\n        if (newMapLocked && currentLocation) {\n            mapInstanceRef.current.setCenter(currentLocation)\n        }\n    }\n\n    const handleRangeChange = (newRange: string) => {\n        setRange(newRange)\n        if (mapInstanceRef.current && currentLocation) {\n            mapInstanceRef.current.setZoom(zoomLevels[newRange as keyof typeof zoomLevels])\n        }\n    }\n\n    const clearMarkers = () => {\n        markersRef.current.forEach((marker) => marker.setMap(null))\n        markersRef.current = []\n    }\n\n    const fetchAndDisplayEmotionMapData = async () => {\n        const emotionData = await fetchEmotionMapData()\n        if (emotionData && mapInstanceRef.current) {\n            clearMarkers()\n\n            emotionData.forEach((data) => {\n                const marker = new window.google.maps.Marker({\n                    position: { lat: data.latitude, lng: data.longitude },\n                    map: mapInstanceRef.current,\n                    icon: {\n                        path: window.google.maps.SymbolPath.CIRCLE,\n                        scale: 10,\n                        fillColor: data.color,\n                        fillOpacity: 0.7,\n                        strokeWeight: 1,\n                        strokeColor: \"#ffffff\",\n                    },\n                    title: `感情: ${data.color}, 時刻: ${new Date(data.timestamp).toLocaleString()}`,\n                })\n                markersRef.current.push(marker)\n            })\n        }\n    }\n\n    return (\n        <div className=\"relative flex-grow w-full overflow-hidden\">\n            <div className=\"absolute top-2.5 left-2.5 bg-white bg-opacity-90 p-2 rounded-lg z-[2] shadow-md\">\n                表示範囲:\n                <select\n                    value={range}\n                    onChange={(e) => handleRangeChange(e.target.value)}\n                    className=\"rounded-md p-1 border ml-2\"\n                >\n                    <option value=\"20\">20m</option>\n                    <option value=\"50\">50m</option>\n                    <option value=\"100\">100m</option>\n                </select>\n            </div>\n\n            <button\n                onClick={toggleMapControl}\n                className=\"absolute top-2.5 right-2.5 px-2.5 py-1.5 rounded-lg z-[2] bg-blue-500 text-white border-none cursor-pointer shadow-md hover:bg-blue-600\"\n            >\n                {mapLocked ? \"操作モードを有効にする\" : \"操作モードを終了する\"}\n            </button>\n\n            <div ref={mapRef} className=\"h-full w-full\" />\n        </div>\n    )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/src/utils/color.ts"],"sourcesContent":["/**\n * HSL (色相、彩度、明度) を HEX (16進数) 形式の色コードに変換する関数\n */\nexport function hslToHex(h: number, s: number, l: number): string {\n    h /= 360\n    s /= 100\n    l /= 100\n    let r, g, b\n\n    if (s === 0) {\n        r = g = b = l // 無彩色 (灰色)\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1\n            if (t > 1) t -= 1\n            if (t < 1 / 6) return p + (q - p) * 6 * t\n            if (t < 1 / 2) return q\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n            return p\n        }\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n        const p = 2 * l - q\n        r = hue2rgb(p, q, h + 1 / 3)\n        g = hue2rgb(p, q, h)\n        b = hue2rgb(p, q, h - 1 / 3)\n    }\n\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16)\n        return hex.length === 1 ? \"0\" + hex : hex\n    }\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`\n}\n\n/**\n * 感情、タップ回数、長押し時間に基づいてHEX形式の色コードを生成する関数\n */\nexport function generateColorCode(emotion: string, tapCount: number, longPressDuration: number): string {\n    let hue: number\n\n    // 感情の種類に応じて色相 (Hue) を設定\n    switch (emotion) {\n        case \"happy\":\n            hue = 60\n            break // 笑顔: 黄色系\n        case \"angry\":\n            hue = 0\n            break // 怒り: 赤色系\n        case \"sad\":\n            hue = 240\n            break // 悲しみ: 青色系\n        case \"joy\":\n            hue = 120\n            break // 喜び: 緑色系\n        default:\n            hue = 0 // 未知の感情の場合は赤\n    }\n\n    // タップ回数と長押し時間に基づいて彩度と明度を調整\n    const saturation = Math.min(100, 50 + tapCount * 5) // 彩度: 最小50, 最大100\n    const lightness = Math.min(90, 50 + longPressDuration / 100) // 明度: 最小50, 最大90\n\n    return hslToHex(hue, saturation, lightness)\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AACM,SAAS,SAAS,CAAS,EAAE,CAAS,EAAE,CAAS;IACpD,KAAK;IACL,KAAK;IACL,KAAK;IACL,IAAI,GAAG,GAAG;IAEV,IAAI,MAAM,GAAG;QACT,IAAI,IAAI,IAAI,EAAE,WAAW;;IAC7B,OAAO;QACH,MAAM,UAAU,CAAC,GAAW,GAAW;YACnC,IAAI,IAAI,GAAG,KAAK;YAChB,IAAI,IAAI,GAAG,KAAK;YAChB,IAAI,IAAI,IAAI,GAAG,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;YACxC,IAAI,IAAI,IAAI,GAAG,OAAO;YACtB,IAAI,IAAI,IAAI,GAAG,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI;YAClD,OAAO;QACX;QACA,MAAM,IAAI,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI;QAC9C,MAAM,IAAI,IAAI,IAAI;QAClB,IAAI,QAAQ,GAAG,GAAG,IAAI,IAAI;QAC1B,IAAI,QAAQ,GAAG,GAAG;QAClB,IAAI,QAAQ,GAAG,GAAG,IAAI,IAAI;IAC9B;IAEA,MAAM,QAAQ,CAAC;QACX,MAAM,MAAM,KAAK,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC;QACzC,OAAO,IAAI,MAAM,KAAK,IAAI,MAAM,MAAM;IAC1C;IAEA,OAAO,CAAC,CAAC,EAAE,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI;AAC/C;AAKO,SAAS,kBAAkB,OAAe,EAAE,QAAgB,EAAE,iBAAyB;IAC1F,IAAI;IAEJ,wBAAwB;IACxB,OAAQ;QACJ,KAAK;YACD,MAAM;YACN,OAAM,UAAU;QACpB,KAAK;YACD,MAAM;YACN,OAAM,UAAU;QACpB,KAAK;YACD,MAAM;YACN,OAAM,WAAW;QACrB,KAAK;YACD,MAAM;YACN,OAAM,UAAU;QACpB;YACI,MAAM,EAAE,aAAa;;IAC7B;IAEA,2BAA2B;IAC3B,MAAM,aAAa,KAAK,GAAG,CAAC,KAAK,KAAK,WAAW,GAAG,kBAAkB;;IACtE,MAAM,YAAY,KAAK,GAAG,CAAC,IAAI,KAAK,oBAAoB,KAAK,iBAAiB;;IAE9E,OAAO,SAAS,KAAK,YAAY;AACrC","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/src/components/message-box.tsx"],"sourcesContent":["\"use client\"\n\ninterface MessageBoxProps {\n    message: string\n    onClose: () => void\n}\n\nexport function MessageBox({ message, onClose }: MessageBoxProps) {\n    return (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-[9999]\">\n            <div className=\"bg-white p-5 rounded-lg shadow-lg text-center max-w-[80%]\">\n                <p className=\"mb-4\">{message}</p>\n                <button\n                    onClick={onClose}\n                    className=\"px-5 py-2 bg-blue-500 text-white border-none rounded cursor-pointer hover:bg-blue-600\"\n                >\n                    OK\n                </button>\n            </div>\n        </div>\n    )\n}\n"],"names":[],"mappings":";;;;AAAA;;AAOO,SAAS,WAAW,EAAE,OAAO,EAAE,OAAO,EAAmB;IAC5D,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC;oBAAE,WAAU;8BAAQ;;;;;;8BACrB,8OAAC;oBACG,SAAS;oBACT,WAAU;8BACb;;;;;;;;;;;;;;;;;AAMjB","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/src/components/emotion-input.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useRef } from \"react\"\nimport type { EmotionType, EmotionCounts, Location } from \"@/types/emotion\"\nimport { generateColorCode } from \"@/utils/color\"\nimport { postEmotionData } from \"@/utils/api\"\nimport { MessageBox } from \"./message-box\"\n\ninterface EmotionInputProps {\n  currentLocation: Location | null\n}\n\nexport function EmotionInput({ currentLocation }: EmotionInputProps) {\n  const [emotionTapCounts, setEmotionTapCounts] = useState<EmotionCounts>({\n    happy: 0,\n    angry: 0,\n    sad: 0,\n    joy: 0,\n  })\n\n  const [emotionLongPressDurations, setEmotionLongPressDurations] = useState<EmotionCounts>({\n    happy: 0,\n    angry: 0,\n    sad: 0,\n    joy: 0,\n  })\n\n  const [lastInteractedEmotion, setLastInteractedEmotion] = useState<EmotionType | null>(null)\n  const [message, setMessage] = useState<string>(\"\")\n  const pressTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const pressStartTimeRef = useRef<number>(0)\n  const isLongPressRef = useRef<boolean>(false)\n\n  const emotions = [\n    { type: \"happy\" as EmotionType, emoji: \"😊\" },\n    { type: \"angry\" as EmotionType, emoji: \"😠\" },\n    { type: \"sad\" as EmotionType, emoji: \"😢\" },\n    { type: \"joy\" as EmotionType, emoji: \"😄\" },\n  ]\n\n  const handlePressStart = (emotion: EmotionType, buttonElement: HTMLButtonElement) => {\n    setLastInteractedEmotion(emotion)\n    pressStartTimeRef.current = new Date().getTime()\n    isLongPressRef.current = false\n\n    if (pressTimerRef.current) {\n      clearTimeout(pressTimerRef.current)\n    }\n\n    pressTimerRef.current = setTimeout(() => {\n      isLongPressRef.current = true\n      const duration = new Date().getTime() - pressStartTimeRef.current\n      setEmotionLongPressDurations((prev) => ({\n        ...prev,\n        [emotion]: duration,\n      }))\n      console.log(`${emotion} 長押し時間: ${duration}ms`)\n\n      const currentColor = generateColorCode(emotion, emotionTapCounts[emotion], duration)\n      buttonElement.style.backgroundColor = currentColor\n    }, 500)\n\n    const currentColorOnPress = generateColorCode(emotion, emotionTapCounts[emotion], 0)\n    buttonElement.style.backgroundColor = currentColorOnPress\n  }\n\n  const handlePressEnd = (emotion: EmotionType, buttonElement: HTMLButtonElement) => {\n    if (pressTimerRef.current) {\n      clearTimeout(pressTimerRef.current)\n      pressTimerRef.current = null\n    }\n\n    if (!isLongPressRef.current) {\n      setEmotionTapCounts((prev) => ({\n        ...prev,\n        [emotion]: prev[emotion] + 1,\n      }))\n      console.log(`${emotion} タップ回数: ${emotionTapCounts[emotion] + 1}`)\n    }\n\n    isLongPressRef.current = false\n    buttonElement.style.backgroundColor = \"#e0e0e0\"\n  }\n\n  const handleSubmit = async () => {\n    if (!lastInteractedEmotion) {\n      setMessage(\"まず感情アイコンをタップまたは長押ししてください。\")\n      return\n    }\n\n    if (!currentLocation) {\n      setMessage(\"現在地が取得できませんでした。位置情報の許可を確認してください。\")\n      return\n    }\n\n    const colorCode = generateColorCode(\n      lastInteractedEmotion,\n      emotionTapCounts[lastInteractedEmotion],\n      emotionLongPressDurations[lastInteractedEmotion],\n    )\n\n    const timestamp = new Date().toISOString()\n    const roundedLatitude = Number.parseFloat(currentLocation.lat.toFixed(6))\n    const roundedLongitude = Number.parseFloat(currentLocation.lng.toFixed(6))\n\n    const result = await postEmotionData(colorCode, roundedLatitude, roundedLongitude, timestamp)\n\n    if (result.success) {\n      setMessage(result.message)\n      // リセット\n      setEmotionTapCounts({ happy: 0, angry: 0, sad: 0, joy: 0 })\n      setEmotionLongPressDurations({ happy: 0, angry: 0, sad: 0, joy: 0 })\n      setLastInteractedEmotion(null)\n    } else {\n      setMessage(result.message)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"fixed bottom-0 left-0 w-full bg-white bg-opacity-95 p-4 shadow-lg z-10 flex flex-col items-center gap-3\">\n        <div className=\"flex justify-center gap-4 w-full max-w-lg\">\n          {emotions.map(({ type, emoji }) => (\n            <button\n              key={type}\n              className=\"flex flex-col items-center justify-center w-15 h-15 bg-gray-300 rounded-full cursor-pointer transition-all duration-300 flex-shrink-0 select-none hover:bg-gray-400\"\n              onMouseDown={(e) => handlePressStart(type, e.currentTarget)}\n              onMouseUp={(e) => handlePressEnd(type, e.currentTarget)}\n              onMouseLeave={(e) => {\n                if (pressTimerRef.current) {\n                  clearTimeout(pressTimerRef.current)\n                  pressTimerRef.current = null\n                }\n                e.currentTarget.style.backgroundColor = \"#e0e0e0\"\n                isLongPressRef.current = false\n              }}\n              onTouchStart={(e) => {\n                e.preventDefault()\n                handlePressStart(type, e.currentTarget)\n              }}\n              onTouchEnd={(e) => {\n                e.preventDefault()\n                handlePressEnd(type, e.currentTarget)\n              }}\n            >\n              <span className=\"text-4xl leading-none select-none transition-transform duration-100\">{emoji}</span>\n            </button>\n          ))}\n        </div>\n\n        <button\n          onClick={handleSubmit}\n          className=\"px-8 py-3 bg-green-500 text-white border-none rounded-full cursor-pointer text-lg font-semibold shadow-lg transition-all duration-200 w-full max-w-md hover:bg-green-600 hover:-translate-y-0.5 active:translate-y-0\"\n        >\n          感情を確定して送信\n        </button>\n      </div>\n\n      {message && <MessageBox message={message} onClose={() => setMessage(\"\")} />}\n    </>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 672, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/src/app/page.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { GoogleMap } from \"@/components/google-map\"\r\nimport { EmotionInput } from \"@/components/emotion-input\"\r\nimport type { Location } from \"@/types/emotion\"\r\n\r\nexport default function Home() {\r\n  const [currentLocation, setCurrentLocation] = useState<Location | null>(null)\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen m-0 p-0 overflow-hidden font-sans\">\r\n      <GoogleMap onLocationChange={setCurrentLocation} />\r\n      <EmotionInput currentLocation={currentLocation} />\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB;IAExE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,mIAAA,CAAA,YAAS;gBAAC,kBAAkB;;;;;;0BAC7B,8OAAC,sIAAA,CAAA,eAAY;gBAAC,iBAAiB;;;;;;;;;;;;AAGrC","debugId":null}},
    {"offset": {"line": 715, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAczC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;YAEP;QACF,OAAO;;QAMP;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 738, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 745, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/geek250621/emocloud/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}}]
}